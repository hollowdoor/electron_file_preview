{"version":3,"file":"electron-file-preview.min.js","sources":["../src/lib/is_element.js","../node_modules/is-video/index.js","../src/lib/file_preview.js","../src/index.js"],"sourcesContent":["/**\n * Returns `true` if provided input is Element.\n * @name isElement\n * @param {*} [input]\n * @returns {boolean}\n */\nexport default function (input) {\n  return (input != null)\n    && (typeof input === 'object')\n    && (input.nodeType === Node.ELEMENT_NODE)\n    && (typeof input.style === 'object')\n    && (typeof input.ownerDocument === 'object');\n}\n","'use strict';\nvar path = require('path');\nvar videoExtensions = require('video-extensions');\nvar exts = Object.create(null);\n\nvideoExtensions.forEach(function (el) {\n\texts[el] = true;\n});\n\nmodule.exports = function (filepath) {\n\treturn path.extname(filepath).slice(1).toLowerCase() in exts;\n};\n","import isVideo from 'is-video';\nimport path from 'path';\nimport { spawn } from 'child_process';\n\nexport default class FilePreview {\n    constructor(info, {\n        element,\n        filename\n    } = {}){\n        this.info = info;\n        this.element = element;\n        this.source = filename;\n        this.dest = path.join(info.cacheFolder, 'temp.mp4');\n\n        this.save();\n    }\n    save(){\n        let { filename, dest } = this;\n        if(isVideo(filename)){\n            let stream  = fs.createWriteStream(dest);\n            let c = spawn('ffmpeg', ['-i', this.source, '-y', this.dest]);\n            c.on('exit', ()=>console.log('done'));\n            c.on('error', e=>console.log(e));\n            console.log('bla')\n            /*ffmpeg(filename)\n            .noAudio()\n            .videoCodec('libx264')\n            .duration('10')\n            .output(stream);*/\n        }\n    }\n}\n","import isElement from './lib/is_element.js';\nimport FilePreview from './lib/file_preview.js';\n\nexport { FilePreview };\n\nexport function efp(element, filename, options){\n    if(!isElement(element)){\n        throw new TypeError(element + ' is not a DOM element');\n    }\n\n    return new FilePreview(\n        Object.assign({\n            element, filename\n        }, options)\n    );\n}\n"],"names":["input","nodeType","Node","ELEMENT_NODE","style","ownerDocument","exts","Object","create","videoExtensions","forEach","el","filepath","path","extname","slice","toLowerCase","FilePreview","info","ref","element","filename","this","source","dest","join","cacheFolder","save","isVideo","fs","createWriteStream","c","spawn","on","console","log","e","options","isElement","TypeError","assign"],"mappings":"6DAMA,MAAe,SAAUA,GACvB,OAAiB,MAATA,GACe,iBAAVA,GACPA,EAAMC,WAAaC,KAAKC,cACD,iBAAhBH,EAAMI,OACkB,iBAAxBJ,EAAMK,kDCRjBC,EAAOC,OAAOC,OAAO,MAEzBC,EAAgBC,QAAQ,SAAUC,GACjCL,EAAKK,IAAM,IAGZ,MAAiB,SAAUC,GAC1B,OAAOC,EAAKC,QAAQF,GAAUG,MAAM,GAAGC,gBAAiBV,GCNpCW,EAAY,SACjBC,EAAMC,0BACdC,YACAC,aAEJC,KAASJ,KAAOA,EAChBI,KAASF,QAAUA,EACnBE,KAASC,OAASF,EAClBC,KAASE,KAAOX,EAAKY,KAAKP,EAAKQ,YAAa,YAE5CJ,KAASK,QAEbV,YAAIU,gBACA,MAA6BL,KAAnBD,aAAUG,SACpB,GAAOI,EAAQP,GAAU,CACHQ,GAAGC,kBAAkBN,GAAvC,IACQO,EAAIC,QAAM,UAAW,KAAMV,KAAKC,OAAQ,KAAMD,KAAKE,OAC3DO,EAAME,GAAG,OAAQ,kBAAIC,QAAQC,IAAI,UACjCJ,EAAME,GAAG,QAAS,SAAAG,UAAGF,QAAQC,IAAIC,KACjCF,QAAYC,IAAI,+BClBjB,SAAaf,EAASC,EAAUgB,GACnC,IAAIC,EAAUlB,GACV,MAAM,IAAImB,UAAUnB,EAAU,yBAGlC,OAAO,IAAIH,EACPV,OAAOiC,QACHpB,QAAAA,EAASC,SAAAA,GACVgB"}